//1.	Description of Program: 
//	Relation R and S are stored in Disk
//	Assume Relation S is already sorted on attributes Y with duplicates allowed.
//	Assume relation R is not sorted.
//	Created sorted index in the Y attribute of R.
//	Initialize sorted index and each block of S into memory and based on matching Of Y attribute retrieved R tuple into the memory to perform Natural Join on relation R and S after matched.
//	If tuples do not match on Y attribute, then discard those tuples of S relation. 
//2.	Description of Memory simulation:
//	R and S are stores in the disk.
//	Here we are assuming that B(R)>M,B(S)>M
//	Each block of R has 2 tuples (total 3 blocks of relation R), and each block of S has 2 tuples (total 4 blocks of relation S).
//	The output buffer size is one block, where each block has two tuples in it. 
//	Memory size is of 2 blocks, first is for sub-list of index of R and another is for each block of S.
//Put the output of the Join operation into the output buffer and increment the count of the buffer pointer.
//	Since the output buffer size is one block, after getting output buffer full, transfer all the tuples into a disk. After each operation, the output buffer copied into a disk.
//	After performing operation and moving output to the disk, memory gets free.

import java.util.ArrayList;
import java.util.Arrays;
import java.util.*;

public class NaturalJoin 
{
	public void natureJoin()
	{
		//R and S are initially on the disk
		//here we are assuming that B(R)>M,B(S)>M
		//each block of R has 2 tuples (total 3 blocks of relation R)
		int[][] R = {{0,2,1},{1,7,3},{2,1,4},{3,4,5},{4,3,6},{5,8,2}};
		//each block of S has 2 tuples (total 4 blocks of relation S)
		int[][] S = {{1,2,1},{1,3,4},{2,3,1},{3,4,8},{3,1,2},{5,1,6},{9,2,1},{9,5,2}};
		
		System.out.println("R relation is: "+Arrays.deepToString(R));
		System.out.println("S relation is: "+Arrays.deepToString(S));
		
		//outputbuffer size is 1 blocks, where each block will have 2 tuples in it.
		int[][] outputbuffer = new int[2][2];
		List disk=new ArrayList();
		int buffer_pointer=0;
		//Memory size is of 2 blocks, first is for sublist of index of R and another is for each block of S   
		List<int[][]> memory=new ArrayList<>(2);
		Map<Integer,Integer> index=new TreeMap<>();
		
		int j=0;
		for(int[] tuple:R)
		{
			index.put(tuple[2],j);
			j++;
		}
		System.out.println(index);
		//final index of two dimension array for relation R
		int[][] index_arr=new int[6][2];
		Set<Integer> keys=index.keySet();
		List<Integer> listofKeys=new ArrayList<>(keys);
		
		for(int i=0;i<keys.size();i++)
		{
			int element=listofKeys.get(i);
			int location=index.get(element);
			System.out.println("Key: "+listofKeys.get(i)+" index:"+location);
			index_arr[i][0]=element;
			index_arr[i][1]=location;
		}
		System.out.println("Index on tuple R where Y column is sorted and is secondary index: ");
		System.out.println(Arrays.deepToString(index_arr));
		//now put index and each block of S into the memory
		memory.add(index_arr);
		int Spointer=0;
		for(int i=0;i<3;i++)
		{
			int[] tuple1=S[Spointer++];
			int[] tuple2=S[Spointer++];
			int[][] block_of_S=new int[2][2];
			block_of_S[0]=tuple1;
			block_of_S[1]=tuple2;
			memory.add(block_of_S);
			//now we have 1 block of S and index on relation R in the memory
			System.out.println(Arrays.deepToString(memory.toArray()));
			int[] S_tuple1=memory.get(1)[0];
			for(int k=0;k<memory.get(0).length;k++)
			{
				if(memory.get(0)[k][0]==S_tuple1[0])
				{
					System.out.println("Matched: R tuple is: "+Arrays.toString(R[memory.get(0)[k][1]])+" S tuple is: "+Arrays.toString(S_tuple1));
					int[] joined = new int[5];
					for(int itr = 0; itr<3; ++itr){
						joined[itr] = R[memory.get(0)[k][1]][itr];
					}
					for(int itr = 2; itr>=1; --itr){
						joined[itr+2] = S_tuple1[itr];
					}	
					//add joined output to output buffer
					outputbuffer[buffer_pointer]= joined;
					buffer_pointer++;
					
					break;
				}
			}
			if(buffer_pointer==2)
			{
				System.out.println("Outputbuffer is full:"+Arrays.deepToString(outputbuffer));
				System.out.println("We will transfer all the tuples into disk because our output buffer is full");
				
				for(int k=0;k<outputbuffer.length;k++)
				{
					disk.add(Arrays.toString(outputbuffer[k]));		
				}
				System.out.println("Outbuffer is copied into the disk");
				outputbuffer=new int[2][2];
				buffer_pointer=0;
			}
			int[] S_tuple2=memory.get(1)[1];
			for(int k=0;k<memory.get(0).length;k++)
			{
				if(memory.get(0)[k][0]==S_tuple2[0])
				{
					System.out.println("Matched: R tuple is: "+Arrays.toString(R[memory.get(0)[k][1]])+" S tuple is: "+Arrays.toString(S_tuple2));
					int[] joined = new int[5];
					for(int itr = 0; itr<3; ++itr){
						joined[itr] = R[memory.get(0)[k][1]][itr];
					}
					for(int itr = 2; itr>=1; --itr){
						joined[itr+2] = S_tuple2[itr];
					}
					
					//add joined output to output buffer
					outputbuffer[buffer_pointer]= joined;
					buffer_pointer++;
					
					break;
				}
			}
			if(buffer_pointer==2)
			{
				System.out.println("Outputbuffer is full:"+Arrays.deepToString(outputbuffer));
				System.out.println("We will transfer all the tuples into disk because our output buffer is full");
				
				for(int k=0;k<outputbuffer.length;k++)
				{
					disk.add(Arrays.toString(outputbuffer[k]));		
				}
				System.out.println("Outbuffer is copied into the disk");
				outputbuffer=new int[2][2];
				buffer_pointer=0;
			}
			
			memory.remove(1);
		}
	
		// If outputbuffer gets full then copy all the tuples into the disk and emptied the buffer. 
				if(buffer_pointer!=0)
				{
					
					for(int k=0;k<outputbuffer.length;k++)
					{
						if(!(outputbuffer[k][0]==0&&outputbuffer[k][1]==0))
						{
							
							disk.add(Arrays.toString(outputbuffer[k]));
						}
					}
				}
				System.out.println("Now we will free the memory as we have already stored our output in the disk");
				System.out.println("Final output in the disk:"+" "+disk);
		
		
	}
	
	public static void main(String[] args) {
		NaturalJoin nj = new NaturalJoin();
		nj.natureJoin();
	}
}
