//Perform Bag-Interesction using one-pass algorithm to develop database system in Java
// Description of simulation: 
// R and S are stores in the disk.
// I have taken two tuples in one block of S and R. Also, B(R)>M>B(S)
// The output buffer size is one block, where each tuple has two tuples in it.
// Blocks of relation S contains two tuples, similarly for relation R.
// Load block1, block2 of relation S one by one into memory.
// Now I have taken each block of R into memory to perform Bag Intersection. 
// For such operation, one block of relation R is load into the memory and check for the intersection operation.
// Since the output buffer size is one block, after getting output buffer full, transfer all the tuples into a disk. After each intersection operation, the output buffer copied into a disk.
// After performing intersection operation and moving output to the disk, memory gets free.



import java.util.*;
public class BagIntersect {
	public static void main(String []args)
	{
		BagIntersect obj=new BagIntersect();
		obj.onePass();
	}
	public void onePass()
	{
		//M=3 blocks where each block has 2 tuples
		int[][] memory=new int[6][2];
		//R and S are stored in disk blocks
		//we have 2 tuples in one block of S
		int[][] S={{0,1},{0,1},{3,2},{3,4}};
		//B(S)=2
		//we have 2 tuples in one block of R
		int[][] R={{0,1},{0,1},{3,3},{5,5},{6,6},{7,8},{3,4},{0,2}};
		//B(R)=4
		//B(R)>B(S)
		int[][] outputbuffer = new int[2][2];
		//outputbuffer size is 1 blocks, where each block will have 2 tuples in it.
		List disk=new ArrayList();
		int count=0;
		int mpointer=0;
		System.out.println("S relation is: "+Arrays.deepToString(S) );
		System.out.println("R relation is: "+Arrays.deepToString(R));
		int half = S.length/2;
		int[][] Sblock1 = new int[2][2];
		int[][] Sblock2 = new int[4][2];
		//buffer_pointer will keep track of the indices of output_buffer
		int buffer_pointer=0;
		
		//S divides in two blocks each with two tuple in respective blocks.
		//Block1 for relation S, which will have 2 tuples in it
		for(int i=0;i<S.length/2;i++){
			Sblock1[i][0]=S[i][0];
			Sblock1[i][1]=S[i][1];
							
		}
		System.out.println("Sblock1 is:"+Arrays.deepToString(Sblock1));
		////Block2 for relation S, which will have 2 tuples in it
		for(int i=S.length/2;i<S.length;i++){
			Sblock2[i][0]=S[i][0];
			Sblock2[i][1]=S[i][1];
			}
		System.out.println("Sblock2 is:["+Arrays.toString(Sblock2[2])+", "+Arrays.toString(Sblock2[3])+"]");
		
		
		//Load blocks of S in memory
		//Load Block1 of S
		for(int j=0;j<Sblock1.length;j++)
		{
			memory[j][0]=Sblock1[j][0];
			memory[j][1]=Sblock1[j][1];
			mpointer++;
		}
		
		//Load Block2 of S
		for(int j=2;j<Sblock2.length;j++)
		{
			memory[j][0]=Sblock2[j][0];
			memory[j][1]=Sblock2[j][1];
			mpointer++;
		}
		System.out.println("Tuples in memory before an operation :"+Arrays.deepToString(memory));
		//now we will take each block of R into memory in order to perform bag intersection
		for(int i=0;i<R.length;i=i+2)
		{
			int[] tuple1=new int[2];
			int[] tuple2=new int[2];
			
			tuple1=R[i];
			tuple2=R[i+1];
			// taking 1 block at a time of relation R into memory
			memory[4]=tuple1;
			memory[5]=tuple2;
			System.out.println("Tuples in block of relation R: ["+Arrays.toString(tuple1)+","+Arrays.toString(tuple2)+"]");

			System.out.println("After each block R is loaded in the memory:"+Arrays.deepToString(memory));
			for(int j=0;j<S.length;j++)
			{
				if(S[j].length!=0 && memory[4][0]==S[j][0] && memory[4][1]==S[j][1])
				{
					S[j]=new int[0];
					outputbuffer[buffer_pointer]=memory[4];
					buffer_pointer++;
					count++;
					mpointer++;
					break;
				}
			}
			for(int j=0;j<S.length;j++)
			{
				if(S[j].length!=0 && memory[5][0]==S[j][0] && memory[5][1]==S[j][1])
				{
					S[j]=new int[0];
					outputbuffer[buffer_pointer]=memory[4];
					buffer_pointer++;
					count++;
					mpointer++;
					break;
				}
			}
			if(buffer_pointer==2)
			{
				System.out.println("Outputbuffer is full:"+Arrays.deepToString(outputbuffer));
				System.out.println("We will transfer all the tuples into disk because our output buffer is full");
				
				for(int k=0;k<outputbuffer.length;k++)
				{
					disk.add(Arrays.toString(outputbuffer[k]));
					
					
				}
				System.out.println("Outbuffer is copied into the disk");
				outputbuffer=new int[2][2];
				buffer_pointer=0;
			}
			
			
		}
		if(buffer_pointer!=0)
		{
			
			for(int k=0;k<outputbuffer.length;k++)
			{
				if(!(outputbuffer[k][0]==0&&outputbuffer[k][1]==0))
				{
					
					disk.add(Arrays.toString(outputbuffer[k]));
				}
			}
		}
		System.out.println("Now we will free the memory as we have already stored our output in the disk");
		memory=new int[6][2];
		System.out.println("Final output in the disk:"+" "+disk);
	}}
	
